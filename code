import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

dataset=pd.read_csv('/content/creditcard.csv')

from google.colab import drive
drive.mount('/content/drive')

dataset.shape
dataset.columns
dataset.info()
dataset.describe()
dataset.isnull().values.any()
dataset.isnull().values.sum()
dataset.columns[dataset.isnull().any()]
len(dataset.columns[dataset.isnull().any()])
dataset.select_dtypes(include="object").columns
len(dataset.select_dtypes(include="object").columns)
sns.countplot(dataset['Class'])
#non fraud transactions
(dataset.Class==0).sum()
  #fraud transactions
(dataset.Class==1).sum()

  dataset_2=dataset.drop(columns="Class")
  dataset_2.corrwith(dataset['Class']).plot.bar(
    figsize=(16,9),title='Correlated with class',grid='True'
)
  corr=dataset.corr()
  plt.figure(figsize=(16,9))
ax=sns.heatmap(corr,annot=True,linewidth=2)

  #matrix of features
x=dataset.drop(columns="Class")

  #traget variable
y=dataset['Class']

  from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)

  x_train.shape

  y_train.shape

  x_test.shape

  y_test.shape

  from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
x_train=sc.fit_transform(x_train)
x_test=sc.transform(x_test)

  x_train

x_test

from sklearn.linear_model import LogisticRegression
classifier_lr=LogisticRegression(random_state=0)
classifier_lr.fit(x_train,y_train)
  
y_pred=classifier_lr.predict(x_test)
from sklearn.metrics import confusion_matrix,accuracy_score

acc=accuracy_score(y_test,y_pred)
from sklearn.metrics import confusion_matrix,accuracy_score

acc=accuracy_score(y_test,y_pred)
print(acc*100)
cm=confusion_matrix(y_test,y_pred)
print(cm)

from xgboost import XGBClassifier
classifier_xgb=XGBClassifier(random_state=0)
classifier_xgb.fit(x_train,y_train)

y_pred=classifier_xgb.predict(x_test)

from sklearn.metrics import accuracy_score,confusion_matrix
acc=accuracy_score(y_test,y_pred)
print(acc*100)
cm=confusion_matrix(y_test,y_pred)
print(cm)

from sklearn.ensemble import RandomForestClassifier
classifier=RandomForestClassifier(random_state=0)
classifier.fit(x_train,y_train)

y_pred=classifier.predict(x_test)
from sklearn.metrics import accuracy_score,confusion_matrix
acc=accuracy_score(y_test,y_pred)
print(acc*100)
cm=confusion_matrix(y_test,y_pred)
print(cm)
dataset.head()
single_obs=[[0	,-1.359807,	-0.072781	,2.536347,	1.378155 ,-0.338321	,0.462388	,0.239599	,0.098698	,0.363787,	...	,-0.018307	,0.277838	,-0.110474	,0.066928,	0.128539,	-0.189115,	0.133558	,-0.021053	,149.62]]
classifier.predict(sc.transform(single_obs))  
